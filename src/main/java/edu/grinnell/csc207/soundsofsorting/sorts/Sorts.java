package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.*;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>,
     * adds swap to event list.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     * @param events the sort events generated by the sort
     */
    public static <T> void swap(T[] arr, int i, int j, List<SortEvent<T>> events) {
        events.add(new SwapEvent(i, j));
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
    
    /**
     * Compares the two indices and returns their comparison value, adds comparison to event list.
     * @param <T> the carrier type of the array
     * @param arr the array to compare within
     * @param i the first index to swap
     * @param j the second index to swap
     * @param events the sort events generated by the sort
     * @return the integer value of the comparison
     */
    public static <T extends Comparable<? super T>> int compare(
            T[] arr, int i, int j, List<SortEvent<T>> events) {
        events.add(new CompareEvent(i, j));
        return arr[i].compareTo(arr[j]);
    }
    
    /**
     * Copies the element into the given index of the array, adds copy to event list.
     * @param <T> the carrier type of the array
     * @param arr the array to copy in
     * @param i the index to copy to
     * @param e the element to copy
     * @param events the sort events generated by the sort
     */
    public static <T extends Comparable<? super T>> void copy(
            T[] arr, int i, T e, List<SortEvent<T>> events) {
        events.add(new CopyEvent(i, e));
        arr[i] = e;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> bubbleSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList();
        boolean madeSwap;
        for (int i = arr.length; i > 1; i--) {
            madeSwap = false;
            for (int j = 1; j < i; j++) {
                if (compare(arr, j - 1, j, events) > 0) {
                    swap(arr, j - 1, j, events);
                    madeSwap = true;
                }
            }
            if (!madeSwap) {
                break;
            }
        }
        return events;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> selectionSort(
            T[] arr) {
        List<SortEvent<T>> events = new ArrayList();
        int minInd;
        for (int i = 0; i < arr.length - 1; i++) {
            minInd = i;
            for (int j = i + 1; j < arr.length; j++) {
                if (compare(arr, j, minInd, events) <= 0) {
                    minInd = j;
                }
            }
            if (minInd != i) {
                swap(arr, i, minInd, events);
            }
        }
        return events;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> insertionSort(
            T[] arr) {
        List<SortEvent<T>> events = new ArrayList();
        for (int i = 1; i < arr.length; i++) {
            for (int j = i; j > 0; j--) {
                if (compare(arr, j, j -1, events) < 0) {
                    swap(arr, j - 1, j, events);
                }
            }
        }
        return events;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeSort(
            T[] arr) {
        List<SortEvent<T>> events = new ArrayList();
        mergeSortH(arr, 0, arr.length, events);
        return events;
    }
    
    /**
     * Sorts the array according to the merge sort algorithm, called recursively.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param start starting index of section (inclusive)
     * @param end ending index of section (exclusive)
     * @param events the sort events generated by this sort
     */
    private static <T extends Comparable<? super T>> void mergeSortH(
            T[] arr, int start, int end, List<SortEvent<T>> events) {
        if (end - start <= 1) {
            return;
        }
        int mid = start + (end - start) / 2;
        
        // Sort two halves and merge
        mergeSortH(arr, start, mid, events);
        mergeSortH(arr, mid, end, events);
        merge(arr, start, mid, end, events);
    }
    
    /**
     * Merges the two splits present in the given array range into
     * one continuous, sorted section
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param start starting index of section (inclusive)
     * @param end ending index of section (exclusive)
     * @param events the sort events generated by this sort
     */
    private static <T extends Comparable<? super T>> void merge(
            T[] arr, int start, int mid, int end, List<SortEvent<T>> events) {
        int leftPtr = start;
        int rightPtr = mid;
        int sortedPtr = start;
        T[] arrCopy = Arrays.copyOf(arr, arr.length);
        
        // Put in lowest element while both sections are still active
        while (leftPtr < mid && rightPtr < end) {
            if (compare(arrCopy, leftPtr, rightPtr, events) <= 0) {
                copy(arr, sortedPtr++, arrCopy[leftPtr++], events);
            } else {
                copy(arr, sortedPtr++, arrCopy[rightPtr++], events);
            }
        }
        
        // Copy over any remaining values of sections to sorted list
        while (leftPtr < mid) {
            copy(arr, sortedPtr++, arrCopy[leftPtr++], events);
        }
        while (rightPtr < end) {
            copy(arr, sortedPtr++, arrCopy[rightPtr++], events);
        }
    }

     /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> quickSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList();
        quickSort(arr, 0, arr.length - 1, events);
        return events;
    }
    
    /**
     * Sorts the array according to the quick sort algorithm. (recursive helper)
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param low the index to begin at (inclusive)
     * @param hi the index to end at (inclusive)
     * @param events the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> void quickSort(
            T[] arr, int low, int hi, List<SortEvent<T>> events) {
        if (low >= hi) {
            return;
        }
        int pivot = hi;
        int lowerPtr = low;
        int higherPtr = hi;
        
        while (lowerPtr < higherPtr) {
            while (compare(arr, lowerPtr, pivot, events) <= 0 && lowerPtr < hi) {
                lowerPtr++;
            }
            while (compare(arr, higherPtr, pivot, events) > 0 && higherPtr > low) {
                higherPtr--;
            }
            if (lowerPtr < higherPtr) {
                swap(arr, lowerPtr, higherPtr, events);
            }
        }
        
        swap(arr, pivot, lowerPtr, events);
        pivot = lowerPtr;
        
        quickSort(arr, low, pivot - 1, events);
        quickSort(arr, pivot + 1, hi, events);
    }
    
    /**
     * Sorts a list by placing every new element into its proper place
     * and "walking" back and forth until everything is sorted.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> gnomeSort(
            T[] arr) {
        List<SortEvent<T>> events = new ArrayList();
        int i = 0;
        while(i < arr.length) {
            if (i == 0 || compare(arr, i, i - 1, events) >= 0) {
                i++;
            } else {
                swap(arr, i, i - 1, events);
                i--;
            }
        }
        return events;
    }
}
