package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import java.util.Arrays;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> bubbleSort(T[] arr) {
        boolean madeSwap;
        for (int i = arr.length; i > 1; i--) {
            madeSwap = false;
            for (int j = 1; j < i; j++) {
                if (arr[j - 1].compareTo(arr[j]) > 0) {
                    swap(arr, j - 1, j);
                    madeSwap = true;
                }
            }
            if (!madeSwap) {
                break;
            }
        }
        return null;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> selectionSort(
            T[] arr) {
        int minInd;
        for (int i = 0; i < arr.length - 1; i++) {
            minInd = i;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j].compareTo(arr[minInd]) <= 0) {
                    minInd = j;
                }
            }
            if (minInd != i) {
                swap(arr, i, minInd);
            }
        }
        return null;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> insertionSort(
            T[] arr) {
        for (int i = 1; i < arr.length; i++) {
            for (int j = i; j > 0; j--) {
                if (arr[j].compareTo(arr[j - 1]) < 0) {
                    swap(arr, j - 1, j);
                }
            }
        }
        return null;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mergeSort(
            T[] arr) {
        mergeSortH(arr, 0, arr.length);
        return null;
    }
    
    /**
     * Sorts the array according to the merge sort algorithm, called recursively.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param start starting index of section (inclusive)
     * @param end ending index of section (exclusive)
     */
    private static <T extends Comparable<? super T>> void mergeSortH(
            T[] arr, int start, int end) {
        if (end - start <= 1) {
            return;
        }
        int mid = start + (end - start) / 2;
        
        // Sort two halves and merge
        mergeSortH(arr, 0, mid);
        mergeSortH(arr, mid, end);
        merge(arr, start, mid, end);
    }
    
    /**
     * Merges the two splits present in the given array range into
     * one continuous, sorted section
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param start starting index of section (inclusive)
     * @param end ending index of section (exclusive)
     */
    private static <T extends Comparable<? super T>> void merge(
            T[] arr, int start, int mid, int end) {
        int leftPtr = start;
        int rightPtr = mid;
        int sortedPtr = start;
        T[] arrCopy = Arrays.copyOf(arr, arr.length);
        
        // Put in lowest element while both sections are still active
        while (leftPtr < mid && rightPtr < end) {
            if (arrCopy[leftPtr].compareTo(arrCopy[rightPtr]) <= 0) {
                arr[sortedPtr++] = arrCopy[leftPtr++];
            } else {
                arr[sortedPtr++] = arrCopy[rightPtr++];
            }
        }
        
        // Copy over any remaining values of sections to sorted list
        while (leftPtr < mid) {
            arr[sortedPtr++] = arrCopy[leftPtr++];
        }
        while (rightPtr < end) {
            arr[sortedPtr++] = arrCopy[rightPtr++];
        }
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSort(T[] arr) {
        quickSortH(arr, 0, arr.length - 1);
        return null;
    }
    
    /**
     * Sorts the array according to the quick sort algorithm. (Recursive helper)
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param start the index to begin sorting at (inclusive)
     * @param end the index to end sorting at (inclusive)
     * @return the sort events generated by this sort
     */
    private static <T extends Comparable<? super T>> void quickSortH(T[] arr, int start, int end) {
        if (end - start <= 1) {
            return;
        }
        
        int pivot = partition(arr, start, end);
        
        quickSortH(arr, start, pivot - 1);
        quickSortH(arr, pivot + 1, end);
    }
    
    /**
     * Partitions two sections of the array around a pivot point and gets that point.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param start the index to begin sorting at (inclusive)
     * @param end the index to end sorting at (inclusive)
     * @return index of pivot point
     */
    private static <T extends Comparable<? super T>> int partition(T[] arr, int start, int end) {
        int pivot = getPivot(arr, start, end);
        swap(arr, pivot, end);
        pivot = end;
        int leftPtr = start;
        int rightPtr = end;
        
        // Put rest of elements on correct side relative to pivot
        while (leftPtr < rightPtr) {
            while (arr[leftPtr].compareTo(arr[pivot]) <= 0 && leftPtr < rightPtr) {
                leftPtr++;
            }
            while (arr[rightPtr].compareTo(arr[pivot]) > 0 && rightPtr > leftPtr) {
                rightPtr--;
            }
            if (leftPtr < rightPtr) {
                swap(arr, leftPtr, rightPtr);
            }
        }
        
        // Put pivot back and update its value to the new location
        swap(arr, leftPtr, pivot);
        return leftPtr;
    }
    
    /**
     * Gets the index of the median between the first, middle, and last elements.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param start the index to begin sorting at (inclusive)
     * @param end the index to end sorting at (inclusive)
     * @return the index of the median value
     */
    private static <T extends Comparable<? super T>> int getPivot(T[] arr, int start, int end) {
        int mid = start + (end - start) / 2;
        
        if (arr[start].compareTo(arr[end]) <= 0) {
            if (arr[mid].compareTo(arr[start]) < 0) {
                return start;
            } else if (arr[mid].compareTo(arr[end]) > 0) {
                return end;
            } else {
                return mid;
            }
        } else {
            if (arr[mid].compareTo(arr[end]) < 0) {
                return end;
            } else if (arr[mid].compareTo(arr[start]) > 0) {
                return start;
            } else {
                return mid;
            }
        }
    }
    
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> gnomeSort(
            T[] arr) {
        int i = 0;
        while(i < arr.length) {
            if (i == 0 || arr[i].compareTo(arr[i - 1]) >= 0) {
                i++;
            } else {
                swap(arr, i, i - 1);
                i--;
            }
        }
        return null;
    }
}
