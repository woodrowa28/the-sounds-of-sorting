package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import java.util.Arrays;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> bubbleSort(T[] arr) {
        boolean madeSwap;
        for (int i = arr.length; i > 1; i--) {
            madeSwap = false;
            for (int j = 1; j < i; j++) {
                if (arr[j - 1].compareTo(arr[j]) > 0) {
                    swap(arr, j - 1, j);
                    madeSwap = true;
                }
            }
            if (!madeSwap) {
                break;
            }
        }
        return null;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> selectionSort(
            T[] arr) {
        int minInd;
        for (int i = 0; i < arr.length - 1; i++) {
            minInd = i;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j].compareTo(arr[minInd]) <= 0) {
                    minInd = j;
                }
            }
            if (minInd != i) {
                swap(arr, i, minInd);
            }
        }
        return null;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> insertionSort(
            T[] arr) {
        for (int i = 1; i < arr.length; i++) {
            for (int j = i; j > 0; j--) {
                if (arr[j].compareTo(arr[j - 1]) < 0) {
                    swap(arr, j - 1, j);
                }
            }
        }
        return null;
    }

    /** Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mergeSort(T[] arr) {
        mergeSortH(arr, arr.length);   
        return null;
    }
    
    /**
     * Sorts each half of the array and then merges them (main execution of merge sort)
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param length the length of the given array
     */
    public static <T extends Comparable<? super T>> void mergeSortH(T arr[], int length) {
        if (length < 2) {
            return;
        }
        int mid = length / 2;
        T[] leftArr = (T[]) new Comparable[mid];
        T[] rightArr = (T[]) new Comparable[length - mid];
        
        for (int i = 0; i < mid; i++) {
            leftArr[i] = arr[i];
        }
        for (int j = mid; j < length; j++) {
            rightArr[j - mid] = arr[j];
        }
        
        mergeSortH(leftArr, mid);
        mergeSortH(rightArr, length - mid);

        merge(arr, leftArr, rightArr, mid, length - mid);
    }
    
    /**
     * Merges two sorted sides of an array into one sorted whole.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param leftArr the left array to be merged
     * @param rightArr the right array to be merged
     * @param left the left index to start at
     * @param right the right index to end at
     */
    public static <T extends Comparable<? super T>> void merge(T[] arr, T[] leftArr, T[] rightArr, int left, int right) {
        
        int leftInd = 0;
        int rightInd = 0;
        int sortedInd = 0;
        
        while (leftInd < left && rightInd < right) {
            if (leftArr[leftInd].compareTo(rightArr[rightInd]) <= 0) {
                arr[sortedInd++] = leftArr[leftInd++];
            } else {
                arr[sortedInd++] = rightArr[rightInd++];
            }
        }
        
        while (leftInd < leftArr.length) {
            arr[sortedInd++] = leftArr[leftInd++];
        }
        
        while (rightInd < rightArr.length) {
            arr[sortedInd++] = rightArr[rightInd++];
        }
    }

     /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSort(T[] arr) {
        quickSort(arr, 0, arr.length - 1);
        return null;
    }
    
    /**
     * Sorts the array according to the quick sort algorithm. (recursive helper)
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param low the index to begin at (inclusive)
     * @param hi the index to end at (inclusive)
     */
    public static <T extends Comparable<? super T>> void quickSort(T[] arr, int low, int hi) {
        if (low >= hi) {
            return;
        }
        int pivot = hi;
        int lowerPtr = low;
        int higherPtr = hi;
        
        while (lowerPtr < higherPtr) {
            while (arr[lowerPtr].compareTo(arr[pivot]) <= 0 && lowerPtr < hi) {
                lowerPtr++;
            }
            while (arr[higherPtr].compareTo(arr[pivot]) > 0 && higherPtr > low) {
                higherPtr--;
            }
            if (lowerPtr < higherPtr) {
                swap(arr, lowerPtr, higherPtr);
            }
        }
        
        swap(arr, pivot, lowerPtr);
        pivot = lowerPtr;
        
        quickSort(arr, low, pivot - 1);
        quickSort(arr, pivot + 1, hi);
    }
    
    /**
     * Sorts a list by placing every new element into its proper place
     * and "walking" back and forth until everything is sorted.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> gnomeSort(
            T[] arr) {
        int i = 0;
        while(i < arr.length) {
            if (i == 0 || arr[i].compareTo(arr[i - 1]) >= 0) {
                i++;
            } else {
                swap(arr, i, i - 1);
                i--;
            }
        }
        return null;
    }
}
